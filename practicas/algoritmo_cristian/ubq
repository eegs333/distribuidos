TIMERADD(3)                                           Linux Programmer's Manual                                           TIMERADD(3)

NNAAMMEE
       timeradd, timersub, timercmp, timerclear, timerisset - timeval operations

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttiimmee..hh>>

       vvooiidd ttiimmeerraadddd((ssttrruucctt ttiimmeevvaall **_a,, ssttrruucctt ttiimmeevvaall **_b,,
                     ssttrruucctt ttiimmeevvaall **_r_e_s));;

       vvooiidd ttiimmeerrssuubb((ssttrruucctt ttiimmeevvaall **_a,, ssttrruucctt ttiimmeevvaall **_b,,
                     ssttrruucctt ttiimmeevvaall **_r_e_s));;

       vvooiidd ttiimmeerrcclleeaarr((ssttrruucctt ttiimmeevvaall **_t_v_p));;

       iinntt ttiimmeerriisssseett((ssttrruucctt ttiimmeevvaall **_t_v_p));;

       iinntt ttiimmeerrccmmpp((ssttrruucctt ttiimmeevvaall **_a,, ssttrruucctt ttiimmeevvaall **_b,, _C_M_P));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       All functions shown above: _BSD_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The macros are provided to operate on _t_i_m_e_v_a_l structures, defined in _<_s_y_s_/_t_i_m_e_._h_> as:

           struct timeval {
               time_t      tv_sec;     /* seconds */
               suseconds_t tv_usec;    /* microseconds */
           };

       ttiimmeerraadddd()  adds  the  time  values in _a and _b, and places the sum in the _t_i_m_e_v_a_l pointed to by _r_e_s.  The result is normalized
       such that _r_e_s_-_>_t_v___u_s_e_c has a value in the range 0 to 999,999.

       ttiimmeerrssuubb() subtracts the time value in _b from the time value in _a, and places the result in the _t_i_m_e_v_a_l  pointed  to  by  _r_e_s.
       The result is normalized such that _r_e_s_-_>_t_v___u_s_e_c has a value in the range 0 to 999,999.

       ttiimmeerrcclleeaarr()  zeros  out  the  _t_i_m_e_v_a_l structure pointed to by _t_v_p, so that it represents the Epoch: 1970-01-01 00:00:00 +0000
       (UTC).

       ttiimmeerriisssseett() returns true (nonzero) if either field of the _t_i_m_e_v_a_l structure pointed to by _t_v_p contains a nonzero value.

       ttiimmeerrccmmpp() compares the timer values in _a and _b using the comparison operator _C_M_P, and returns true  (nonzero)  or  false  (0)
       depending  on  the  result of the comparison.  Some systems (but not Linux/glibc), have a broken ttiimmeerrccmmpp() implementation, in
       which _C_M_P of _>_=, _<_=, and _=_= do not work; portable applications can instead use

           !timercmp(..., <)
           !timercmp(..., >)
           !timercmp(..., !=)

RREETTUURRNN VVAALLUUEE
       ttiimmeerriisssseett() and ttiimmeerrccmmpp() return true (nonzero) or false (0).

EERRRROORRSS
       No errors are defined.

CCOONNFFOORRMMIINNGG TTOO
       Not in POSIX.1.  Present on most BSD derivatives.

SSEEEE AALLSSOO
       ggeettttiimmeeooffddaayy(2), ttiimmee(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information  about  reporting
       bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                         2010-02-25                                                  TIMERADD(3)
